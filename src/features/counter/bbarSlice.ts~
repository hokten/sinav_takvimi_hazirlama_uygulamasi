import { createAsyncThunk, createSlice, PayloadAction, createSelector } from '@reduxjs/toolkit';
import { RootState, AppThunk } from '../../app/store';

export interface BolumBarKutu {
	id : string,
	bolumKodu : string,
	renk : string,
	etkin : boolean
}


const initialState: BolumBarKutu[] = [
	{
		id : "swes", 
		bolumKodu : "BIL", 
		renk : "green",
		etkin : true
	},
	{
		id : "sisses", 
		bolumKodu : "ELE", 
		renk : "red",
		etkin : false
	},
	{
		id : "eeswes", 
		bolumKodu : "MOD", 
		renk : "green",
		etkin : false
	},
];



export const bbarSlice = createSlice({
  name: 'bbar',
  initialState : initialState as BolumBarKutu[],
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    bolumuEtkinlestir: (state, action: PayloadAction<string>) => {
    	let index = state.findIndex((val:BolumBarKutu) => val.id == action.payload);
    	if(index != -1) {
		for(let i=0; i<state.length; i++) state[i].etkin=false;
		state[index].etkin = true;
	}
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
 });
export const selectBbar = (state: RootState) => state.bbar;

export const { bolumuEtkinlestir } = bbarSlice.actions; 

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`

export default bbarSlice.reducer;
