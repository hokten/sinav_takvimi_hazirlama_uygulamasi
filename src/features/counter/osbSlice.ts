import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk } from '../../app/store';

export interface Salon {
	id : string,
	salonAdi : string
}
export interface Oturum {
	id : string,
	oturumTarihSaat : string
}
export interface Bolum {
	id : string,
	bolumAdi : string
}

export interface OsbKayit {
	salon : Salon,
	oturum : Oturum,
	bolum : Bolum
}

const initialState: OsbKayit[] = [
	{
		salon : <Salon>{id:"wxdd", salonAdi: "A101"}, 
		oturum : <Oturum>{id:"dssdf", oturumTarihSaat:"12:11 2023"}, 
		bolum : <Bolum>{id:"aas", bolumAdi:"Bilgisayar"}
	},
	{
		salon : <Salon>{id:"wasdsad", salonAdi: "A102"}, 
		oturum : <Oturum>{id:"dssdf", oturumTarihSaat:"12:11 2024"}, 
		bolum : <Bolum>{id:"aas", bolumAdi:"Elektirik"}
	}
];



export const osbSlice = createSlice({
  name: 'osb',
  initialState : initialState as OsbKayit[],
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    pincrement: (state) => {
    	let index = state.findIndex((osb) => osb.bolum.bolumAdi=="Elektirik");
	if (index != -1) state[index].bolum.bolumAdi = "Otomasyon";
    },
    pdecrement: (state) => {
    },
    // Use the PayloadAction type to declare the contents of `action.payload`
    pincrementByAmount: (state, action: PayloadAction<number>) => {
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
 });

export const { pincrement, pdecrement, pincrementByAmount } = osbSlice.actions;
export const selectOsb = (state: RootState) => state.osb;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`

export default osbSlice.reducer;
