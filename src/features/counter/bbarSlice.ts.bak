import { createAsyncThunk, createSlice, PayloadAction, createSelector } from '@reduxjs/toolkit';
import { RootState, AppThunk } from '../../app/store';



type SegmentedControl = { label: string, value: string, renk: string } | null
export const bolumleriAl = createAsyncThunk(
    "bolumlerial",
    async () => {
        const response = await fetch('/bolumler');
	return (await response.json()) as SegmentedControl[]
    }
);


const initialState: SegmentedControl[] = []


export const bbarSlice = createSlice({
  name: 'bbar',
  initialState : initialState as SegmentedControl[],
  reducers: {
    bolumuEtkinlestir: (state, action: PayloadAction<string>) => {
    	let index = state.findIndex((val:SegmentedControl) => val.id == action.payload);
    	if(index != -1) {
		for(let i=0; i<state.length; i++) state[i].etkin=false;
		state[index].etkin = true;
	}
    },
  },

extraReducers: {
        [bolumleriAl.fulfilled]: (state, action) => {
            state =  action.payload;
        },
    },








  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
 });
export const selectBbar = (state: RootState) => state.bbar

export const { bolumuEtkinlestir } = bbarSlice.actions 

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`

export default bbarSlice.reducer
