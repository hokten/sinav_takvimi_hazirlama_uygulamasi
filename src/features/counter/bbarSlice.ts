import { createAsyncThunk, createSlice, PayloadAction, createSelector } from '@reduxjs/toolkit';
import { RootState, AppThunk } from '../../app/store';

type SegmentedControl = { label: string, value: string, renk: string } | null
interface IBolumCubuk {
	bolumler : SegmentedControl[]
	etkin : string
}

export const bolumleriAl = createAsyncThunk(
    "bolumleriAl",
    async () => {
        const response = await fetch('/bolumler');
	console.log(response);
	return (await response.json()) as IBolumCubuk
    }
);


const initialState: IBolumCubuk = { bolumler : [] as SegmentedControl[], etkin : '' }


export const bbarSlice = createSlice({
  name: 'bbar',
  initialState : initialState as IBolumCubuk,
  reducers: {
    bolumuEtkinlestir: (state, action: PayloadAction<string>) => {
    state.etkin = action.payload
    	}
    },

extraReducers: (builder) => {
builder.addCase(bolumleriAl.fulfilled, (state, action) => {
state.bolumler = action.payload.bolumler
state.etkin = action.payload.etkin
return state
})
},


  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
 });
export const selectBbar = (state: RootState) => state.bbar



export const { bolumuEtkinlestir } = bbarSlice.actions 

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`

export default bbarSlice.reducer
